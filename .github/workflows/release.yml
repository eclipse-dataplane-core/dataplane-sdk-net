name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0 or v1.0.0)'
        required: true
        type: string

jobs:
  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      version: ${{ steps.normalize_version.outputs.version }}
      tag: ${{ steps.normalize_version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Normalize version
        id: normalize_version
        run: |
          version="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          version="${version#v}"
          # Add 'v' prefix for tag
          tag="v${version}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        run: |
          if git rev-parse "${{ steps.normalize_version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Error: Tag ${{ steps.normalize_version.outputs.tag }} already exists"
            exit 1
          fi

      - name: Update version in .csproj files
        run: |
          # Find all .csproj files with <Version> tags and update them
          find . -name "*.csproj" -type f | while read file; do
            if grep -q "<Version>" "$file"; then
              sed -i.bak "s|<Version>.*</Version>|<Version>${{ steps.normalize_version.outputs.version }}</Version>|g" "$file"
              rm "${file}.bak"
              echo "Updated version in $file"
            fi
          done

      - name: Commit version bump
        run: |
          git add "*.csproj"
          if git diff --cached --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "chore: bump version to ${{ steps.normalize_version.outputs.version }}"
            git push origin HEAD
          fi

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.normalize_version.outputs.tag }}" -m "Release ${{ steps.normalize_version.outputs.tag }}"
          git push origin "${{ steps.normalize_version.outputs.tag }}"

  publish-nuget:
    name: Publish NuGet Packages
    needs: create-tag
    uses: ./.github/workflows/publish_nuget.yml
    with:
      version: ${{ needs.create-tag.outputs.version }}
    permissions:
      packages: write
      contents: read

  create-release:
    name: Create GitHub Release
    needs: [create-tag, publish-nuget]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.create-tag.outputs.tag }}
          name: Release ${{ needs.create-tag.outputs.tag }}
          generateReleaseNotes: true
          body: |
            NuGet packages published to GitHub Packages.

            ### Installation
            ```bash
            dotnet add package DataPlane.Sdk.Core --version ${{ needs.create-tag.outputs.version }}
            dotnet add package DataPlane.Sdk.Api --version ${{ needs.create-tag.outputs.version }}
            ```
          draft: false
          prerelease: false
